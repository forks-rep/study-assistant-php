<?php

if (!function_exists('study_scheduler'))
{
    function study_scheduler($request, $schedule)
    {
        $start = strtotime($request->input('start'));
        $end = strtotime($request->input('end'));

        $noDays = round((($end - $start)/(60 * 60 * 24)));

        $noModules = count($request->input('module'));

        $daysPerModule = intval($noDays/$noModules);

        $evenDays = $daysPerModule * $noModules;

        $unevenDays = $noDays - $evenDays;

        $s = 'Days: '.$noDays.' | Rest Days: '.$unevenDays.' | Modules: '.$noModules.' | Days Per Module: '.$daysPerModule;

        $sched = array();
        $x = 0;

        $sched[] = $s;

        for ($i=0; $i < $noDays; $i++) 
        { 

            if ($x < ($noModules-1) && $i < $evenDays) 
            {
                $sched[] = 'day: '.$i.' | module: '.$x;
                $x++;
            } 
            elseif (!($x < ($noModules-1)) && $i < $evenDays) 
            {
                $sched[] = 'day: '.$i.' | module: '.$x;
                $x = 0;
            } 
            else 
            {
                $rand = rand(0, $noModules);
                $sched[] = 'uneven day '.$i.' | module: '.$rand ;
            }
        }


        $start = $request->input('start');



        foreach ($request->input('module') as  $key => $value){
            $x = $key - 1;
            $schedule-> modules()-> create([
                'name' => $value,
                'start' => date('Y-m-d', strtotime($start. ' + '.$x.' days'))
            ]);
        }

        return ($sched);
    }
}

// v2


if (!function_exists('schedule_retriever'))
{
    function schedule_retriever()
    {
        $user = Auth::user();
        $schedule = $user->schedule;

        $data = [];

        
        $modules = $schedule->modules;

        // Calculations
        
        $scheduleStart = strtotime($schedule->start);
        $scheduleEnd = strtotime($schedule->revision);

        $noDays = round((($scheduleEnd - $scheduleStart)/(60 * 60 * 24)));
        $noModules = count($modules);

        $daysPerModule = intval($noDays/$noModules);


        foreach ($modules as $module) {

            // Use of php-rrule library

            $rrule = new RRule([
                'FREQ' => 'DAILY',
                'INTERVAL' => $noModules,
                'DTSTART' => $module->start,
                'COUNT' => $daysPerModule
            ]);
                    
            foreach ($rrule as $date)
            {
                $moduleStart = $date->format('Y-m-d');

                $data[]= 
                [
                    'title' => $module->name,
                    'start' => $moduleStart,
                    'end' => $moduleStart,
                    'color' => '#2196f3'
                ];  
            }
        }

        $rrule2 = new RRule([
            'FREQ' => 'DAILY',
            'DTSTART' => $schedule->revision,
            'UNTIL' => $schedule->end,
        ]);

        foreach ($rrule2 as $date)
        {
            $moduleStart = $date->format('Y-m-d');

            $data[]= 
            [
                'title' => 'Revision',
                'start' => $moduleStart,
                'end' => $moduleStart,
                'color' => '#000'
            ];  
        }
        

        return $data;
    }
}

// v3

if (!function_exists('schedule_retriever'))
{
    function schedule_retriever()
    {
        $user = Auth::user();
        $schedule = $user->schedule;

        $data = [];

        
        $modules = $schedule->modules;

        // Calculations
        
        $scheduleStart = strtotime($schedule->start);
        $scheduleEnd = strtotime($schedule->revision);

        $noDays = round((($scheduleEnd - $scheduleStart)/(60 * 60 * 24)));
        $noModules = count($modules);

        $daysPerModule = intval($noDays/$noModules);


        foreach ($modules as $module) {

            // Use of php-rrule library

            $rrule = new RRule([
                'FREQ' => 'DAILY',
                'INTERVAL' => $noModules,
                'DTSTART' => $module->start,
                'COUNT' => $daysPerModule
            ]);
                    
            foreach ($rrule as $date)
            {
                $moduleStart = $date->format('Y-m-d');

                $data[]= 
                [
                    'title' => $module->name,
                    'start' => $moduleStart,
                    'end' => $moduleStart,
                    'color' => '#2196f3'
                ];  
            }
        }

        $rrule2 = new RRule([
            'FREQ' => 'DAILY',
            'DTSTART' => $schedule->revision,
            'UNTIL' => $schedule->end,
        ]);

        foreach ($rrule2 as $date)
        {
            $moduleStart = $date->format('Y-m-d');

            $data[]= 
            [
                'title' => 'Revision',
                'start' => $moduleStart,
                'end' => $moduleStart,
                'color' => '#000'
            ];  
        }
        

        return $data;
    }
}